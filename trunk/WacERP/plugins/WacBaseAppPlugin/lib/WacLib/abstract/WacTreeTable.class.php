<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class WacTreeTable extends WacCommonTable
{
    protected static $_maxNodesPerGet = 10000;
    protected $_customFilterParams = array();

//    public $maxLayerNum = 10;
//    public $limitNodes = 500;  // number per get list

    /*
     * getListByParent
     *
     * $parent - node object
     * $isAvail - can be "all", "1", "0"
     */
    public function getChildren($parent, $recursive=false, $isArr= false, $maxPerPage=-1, $isAvail="all", $orderBy= "t1.left_number asc", $params=array())
    {
        $arrParam = array();
        $arrParam['orderBy'] = $orderBy;
        if($isAvail != "all"){
            $arrParam['andWhere'][] = "t1.is_avail={$isAvail}";
        }
        if($recursive){  // get all children
            $arrParam['andWhere'][] = "t1.left_number>=".$parent->getLeftNumber();
            $arrParam['andWhere'][] = "t1.right_number<=".$parent->getRightNumber();
        }
        else{
            $arrParam['andWhere'][] = "t1.parent_id=".$parent->getId();
        }

        $limitRows = ($maxPerPage == -1) ? self::$_maxNodesPerGet : $maxPerPage;

        return $this->getAbstractList(array_merge_recursive($arrParam, $this->getCustomFilter()), 1, $limitRows, $isArr);
    }

    /*
     * getAllLeaf
     */
    public function getAllLeaf(Doctrine_Record $node, $isArr= false, $maxPerPage=-1, $isAvail="all", $orderBy= "t1.left_number asc"){
        $arrParam = array();
        $arrParam['orderBy'] = $orderBy;
        if($isAvail != "all"){
            $arrParam['andWhere'][] = "t1.is_avail={$isAvail}";
        }
        $arrParam['andWhere'][] = "t1.right_number = t1.left_number + 1";
        $limitRows = ($maxPerPage == -1) ? self::$_maxNodesPerGet : $maxPerPage;
        return $this->getAbstractList(array_merge_recursive($arrParam, $this->getCustomFilter()), 1, $limitRows, $isArr);
    }

    /*
     * createNode
     * @return node
     */
    public function createNode($parent, $params=array(), $isAvail="all"){
        
        $this->updateTreeBeforeCreate($parent, $isAvail);

        $newNode = $this->create($params);
        $newNode->setParentId($parent->getId());
        $newNode->setLeftNumber($parent->getRightNumber());
        $newNode->setRightNumber($parent->getRightNumber()+1);
        $newNode->setLevel($parent->getLevel()+1);
        $newNode->save();

        $this->updateTreeAfterCreate($newNode, $isAvail);

        return $newNode;
    }

    /*
     * updateNodes before create a node
     */
    public function updateTreeBeforeCreate($parent, $isAvail="all"){
        $customFilterStr = $this->getCustomFilter(true);

        //update right number greater than the node
        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("right_number", "right_number + 2")
                        ->where("right_number>=" . $parent->getRightNumber());
        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }
        
        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }

        $objQuery->execute();

        //update left number greater than the node
        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("left_number", "left_number + 2")
                        ->where("left_number>" . $parent->getRightNumber());

        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }

        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }

        $objQuery->execute();
        $objQuery->free();
    }

    /*
     * updateNodes after create a node
     */
    public function updateTreeAfterCreate($node, $isAvail="all"){
        //update position
        $customFilterStr = $this->getCustomFilter(true);
        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("position", "position + 1")
                        ->where("parent_id=" . $node->getParentId())
                        ->andWhere("position>=". $node->getPosition());
        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }

        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }
        $objQuery->execute();
        $objQuery->free();
    }

    /*
     * editNode
     * @return node
     */
    public function editNode(Doctrine_Record $node, $params=array()){
        if(is_array($params) && count($params)>0){
            foreach($params as $k=>$v){
                $node->set($k, $v);
            }
            $node->save();
        }
        
    }

    /*
     * moveNode
     * @return node
     */
    public function moveNode(Doctrine_Record $node, Doctrine_Record $targetParentNode, $params=array()){

//        $this->disableBranch($node, "1");
//        $this->updateTreeBeforeRemove($node, "1");
//
//        $node->setParentId($targetParentNode->getId());
//        $node->setPosition($params["position"]);
//        $node->save();
//
        $this->enableBranch($node, "0");
//        $this->updateTreeBeforeCreate($node, "1");
    }

    public function disableBranch($node, $isAvail="all"){
        $properties = array("is_avail"=>"0");
        return $this->setBranchProperties($properties, $node, true, -1, $isAvail);
    }

    public function enableBranch($node, $isAvail="all"){
        $properties = array("is_avail"=>"1");
        return $this->setBranchProperties($properties, $node, true, -1, $isAvail);
    }

    /*
     * setNodeProperties
     */
    public function setBranchProperties(array $properties, $theNode, $recursive=true, $maxPerPage=-1, $isAvail="all"){
        $nodes = $this->getChildren($theNode, $recursive, false, $maxPerPage, $isAvail);
        if($nodes->count(0) > 0){
            foreach($nodes as $node){
                if(is_array($properties) && count($properties)>0){
                    foreach($properties as $k=>$v){
                         $node->set($k, $v);
                    }
                    $node->save();
                }
            }
        }
        return true;
    }


    /*
     * removeNode
     * @return node
     */
    public function removeNode($node, $params=array(), $isAvail="all"){
        $children = $this->getChildren($node, true);

        $succFlag = true;
        if($children->count()>0){
            foreach($children as $child){
                if(!$child->delete()){
                    $succFlag = false;
                    break;
                }
            }
        }        

        if($succFlag){
            $this->updateTreeBeforeRemove($node, $isAvail);
            $succFlag = $node->delete();
            $this->updateTreeAfterRemove($node, $isAvail);
        }

        return $succFlag;
    }

    /*
     * updateNodes before remove a node
     * $isAvail - can be "all", "1", "0"
     */
    public function updateTreeBeforeRemove($node, $isAvail="all"){
        $customFilterStr = $this->getCustomFilter(true);
        $minusNumber = $node->getRightNumber() - $node->getLeftNumber() + 1;

        //update right number greater than the node
        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("right_number", "right_number - {$minusNumber}")
                        ->where("right_number>" . $node->getRightNumber());
                        
        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }

        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }
        $objQuery->execute();

        //update left number greater than the node
        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("left_number", "left_number - {$minusNumber}")
                        ->where("left_number>" . $node->getRightNumber());
        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }
        
        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }
        $objQuery->execute();
    }

    /*
     * updateNodes after remove a node
     * $isAvail - can be "all", "1", "0"
     */
    public function updateTreeAfterRemove($node, $isAvail="all"){
        //update position
        $customFilterStr = $this->getCustomFilter(true);
        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("position", "position - 1")
                        ->where("parent_id=" . $node->getParentId())
                        ->andWhere("position>". $node->getPosition());
        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }

        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }
        $objQuery->execute();

        $objQuery->free();
    }

    /*
     * set custom filter params in the tree
     * canbe override by children
     * @params - array("Key"=>"Value"), looks like
     *   $params = array(
     *      "user_id" => 1
     *   )
     */
    public function setCustomFilter(array $params){
        $this->_customFilterParams = $params;
    }

    /*
     * get custom filter params in the tree
     * canbe override by children
     */
    public function getCustomFilter($toStr=false){
        if(!$toStr){
            $arrParams = array();
            if(is_array($this->_customFilterParams) && count($this->_customFilterParams)>0){
                foreach($this->_customFilterParams as $k => $v){
                    $arrParams['andWhere'][] = "t1.{$k}={$v}";
                }
            }
            return $arrParams;
        }
        else{
            $filterStr = "";
            if(is_array($this->_customFilterParams) && count($this->_customFilterParams)>0){
                foreach($this->_customFilterParams as $k => $v){
                    $arrParams[] = "t1.{$k}={$v}";
                }
                $filterStr = implode(" and ", $arrParams);
            }
            return $filterStr;
        }
    }

}