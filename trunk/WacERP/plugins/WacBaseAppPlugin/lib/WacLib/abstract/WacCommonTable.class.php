<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class WacCommonTable extends Doctrine_Table
{
    public $_pager;

    /*
	 * Return a list which can be visible on the website
	 * @param $arrParams an parameter array for extension,  eg. $arrParams = ['andWhere'][] = "code='{$code}'";
	 * @page - page number
         * @maxPerPage - max rows per page
	 * @return an array
	 * @author ben
	 */
    public function getAbstractList($arrParams = array(), $page=1, $maxPerPage=20, $isArr=true)
    {
        $objQuery = $this->createQuery('t1')
            ->select('t1.*');

        if(is_array($arrParams) && count($arrParams)>0)
        {
            QueryHelper::processOption($objQuery, $arrParams);  // dont set "offset" and "limit" option in it
        }

        $this->_pager = new Doctrine_Pager($objQuery, $page, $maxPerPage);
        if($isArr)
        {
            $items = $this->_pager->execute(array(), Doctrine::HYDRATE_ARRAY);
        }
        else
        {
            $items = $this->_pager->execute();
        }

        $objQuery->free();
        return $items;
    }

    /*
     * quickly fetch an attribute of one record by some conditions
     */
    public function fetchAttribute($attribute, $conditions)
    {
        $objQuery = $this->createQuery('t1')
            ->select("t1.{$attribute}");

        QueryHelper::processOption($objQuery, $conditions);
        $dataResult = $objQuery->fetchOne(array(), Doctrine::HYDRATE_ARRAY);
        $objQuery->free();
        return $dataResult[$attribute];
    }

    /*
     * $arrParams - can contains array('andWhere'=>'sth', 'orderBy'=>'sth')
     * return a list
     */
    public function getList($arrParams, $page=1, $maxPerPage=20, $isArr=true)
    {
        return $this->getAbstractList($arrParams, $page, $maxPerPage, $isArr);
    }

    /*
     * return value
     */
    public function getOneByParams($arrParams, $isArr=true)
    {
        $objQuery = $this->createQuery('t1')
            ->select("t1.*");

        QueryHelper::processOption($objQuery, $arrParams);

        $dataResult = null;
        
        if($isArr){
            $dataResult = $objQuery->fetchOne(array(), Doctrine::HYDRATE_ARRAY);
        }
        else{
            $dataResult = $objQuery->fetchOne(array(), Doctrine::HYDRATE_RECORD);
        }
        $objQuery->free();
        return $dataResult;
    }

    /*
     * return a common list
     *  eg. $arrParams = ['andWhere'][] = "code='{$code}'";
     */
    public function getCommonList($page=1, $maxPerPage=20, $isArr=true, $params=array())
    {
        $arrParams = array(
            'orderBy'=>'t1.id desc'
        );

        if(is_array($params) && count($params)>0)
        {
            $arrParams = array_merge_recursive($params, $arrParams);
        }

        return $this->getAbstractList($arrParams, $page, $maxPerPage, $isArr);
    }

    /*
     * this method canbe override
     * return a custome list
     */
    public function getCustomList($arrParams, $page=1, $maxPerPage=20, $isArr=true)
    {
        return $this->getAbstractList($arrParams, $page, $maxPerPage, $isArr);
    }

  /*
   *  return id=>name hash
    */
    public function getIdNameHash($page=1, $rows=50, $params=array(), $condParams=array()) {
        return $this->getHashList("id", "name", $condParams, $page, $rows, $params);
    }

    /*
   *  return code=>name hash
    */
    public function getCodeNameHash($page=1, $rows=50, $params=array(), $condParams=array()) {
        return $this->getHashList("code", "name", $condParams, $page, $rows, $params);
    }

    /*
   *  return code=>value hash
    */
    public function getCodeValueHash($page=1, $rows=500, $params=array(), $condParams=array()) {
        return $this->getHashList("code", "value", $condParams, $page, $rows, $params);
    }

    /*
     * @condParam - condition array
   * @return hash list data array
    */
    public function getHashList($keyField, $valField, $condParams=array(), $page=1, $rows=20, $params=array()) {
        $resultSet = array();
        $arrParams = array();

        if(count($condParams)>0) {
            $arrParams = $condParams;
        }
        else {
            $arrParams['orderBy'] = "t1.id asc";
        }

        if(sfConfig::has("maxHashItems")) {
            $rows = sfConfig::get("maxHashItems");
        }

        $listItems = $this->getCustomList($arrParams, $page, $rows, true);

        if(isset($params["format"]) && $params["format"]=="SF_SELECT_OPTIONS") {
            $resultSet = SfDataHelper::getInstance()->toSelectOptions($listItems, $keyField, $valField);
        }
        else {
            if(count($listItems)>0) {
                foreach($listItems as $listItem) {
                    $tmpArr = array();
//              $keyMethodName = "get".ucfirst($keyField);
//              $valueMethodName = "get".ucfirst($valField);
//              $tmpArr[$arrListItem->$keyMethodName()] = $arrListItem->$valueMethodName();
                    $tmpArr = array("key"=>$listItem[$keyField], "value"=>$listItem[$valField]);
                    $resultSet[] = $tmpArr;
                }
            }
        }

        return $resultSet;
    }

    /*
     * return pager obj
     */
    public function getPager()
    {
        return $this->_pager;
    }

    /*
     * judge the attributes is existed or not
     * $attributs - array('field'=>'value')
     * @return boolean
     */
    public function isExistedAttributes(array $attributes, $exceptId=0)
    {
        $where = "";
        if(is_array($attributes) && count($attributes)>0)
        {
            $conditions = array();
            foreach($attributes as $key=>$v){
                $conditions[] = "t1.{$key} = '{$v}'";
            }
            $where = implode(" and ", $conditions);
        }
        
        if($exceptId==0)
        {
            $objQuery = $this->createQuery('t1')
             ->select("count(*) as total")
             ->where("t1.is_avail=1")
             ->andWhere($where, $attributes);
        }
        else
        {
            $objQuery = $this->createQuery('t1')
             ->select("count(*) as total")
             ->where("t1.is_avail=1 and t1.id<>'{$exceptId}'")
             ->andWhere($where, $attributes);
        }

        $dataResult = $objQuery->fetchOne();
        $objQuery->free();
        return ($dataResult['total']>0);
    }

    /*
     * judge the attribute is existed or not
     * @return boolean
     */
    public function isExistedAttribute($attribute, $val, $exceptId=0, $igroneStatus=true)
    {
        $conditionStr = $igroneStatus ? "":" t1.is_avail=1 and ";
        if($exceptId==0)
        {
            $objQuery = $this->createQuery('t1')
             ->select("count(*) as total")
             ->where("{$conditionStr} t1.{$attribute}='{$val}'");
        }
        else
        {
            $objQuery = $this->createQuery('t1')
             ->select("count(*) as total")
             ->where("{$conditionStr} t1.{$attribute}='{$val}' and t1.id<>'{$exceptId}'");
        }
        $dataResult = $objQuery->fetchOne();
        $objQuery->free();        
        return ($dataResult['total']>0);
    }

    /*
     * judge the id is existed or not
     * @return boolean
     */
    public function isExistedId($val, $exceptId=0, $igroneStatus=true)
    {
        return $this->isExistedAttribute("id", $val, $exceptId, $igroneStatus);
    }

    /*
     * judge the code is existed or not
     * @return boolean
     */
    public function isExistedCode($val, $exceptId=0, $igroneStatus=true)
    {
        return $this->isExistedAttribute("code", $val, $exceptId, $igroneStatus);
    }

    /*
     * judge the name is existed or not
     * @return boolean
     */
    public function isExistedName($val, $exceptId=0)
    {
        return $this->isExistedAttribute("name", $val, $exceptId);
    }

    /*
     * set foreign key checkes off
     */
    public static function turnOffForeignKey()
    {
        $doctrine = Doctrine_Manager::getInstance()->getCurrentConnection()->getDbh();
        $doctrine->query("SET FOREIGN_KEY_CHECKS=0");
        unset($doctrine);
    }

    /*
     * truncate table
     */
    public function truncate()
    {
        $doctrine = Doctrine_Manager::getInstance()->getCurrentConnection()->getDbh();
        $doctrine->query('TRUNCATE TABLE '.$this->getTableName());
        unset($doctrine);
    }

    /*
     * return the key string of the table
     */
    public function getWacTableClassKey($name)
    {
        $pattern = '/^Wac(?P<key>.*)Table$/i';
        preg_match($pattern, $name, $matches);
        return $matches["key"];
    }


}