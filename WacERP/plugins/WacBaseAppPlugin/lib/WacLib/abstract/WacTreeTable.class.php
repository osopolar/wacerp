<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class WacTreeTable extends WacCommonTable
{
    protected static $_maxNodesPerGet = 10000;
    protected $_customFilterParams = array();

//    public $maxLayerNum = 10;
//    public $limitNodes = 500;  // number per get list

    /*
     * getListByParent
     *
     * $parent - node object
     * $isAvail - can be "all", "1", "0"
     */
    public function getChildren($parent, $recursive=false, $isArr= false, $maxPerPage=-1, $isAvail="all",$orderBy= "t1.left_number asc", $params=array())
    {
        $arrParam = array();
        $arrParam['orderBy'] = $orderBy;
        if($isAvail != "all"){
            $arrParam['andWhere'][] = "t1.is_avail={$isAvail}";
        }
        if($recursive){  // get all children
            $arrParam['andWhere'][] = "t1.left_number>=".$parent->getLeftNumber();
            $arrParam['andWhere'][] = "t1.right_number<=".$parent->getRightNumber();
        }
        else{
            $arrParam['andWhere'][] = "t1.parent_id=".$parent->getId();
        }

        $limitRows = ($maxPerPage == -1) ? self::$_maxNodesPerGet : $maxPerPage;

        return $this->getAbstractList(array_merge_recursive($arrParam, $this->getCustomFilter()), 1, $limitRows, $isArr);
    }

    /*
     * getAllLeaf
     */
    public function getAllLeaf(Doctrine_Record $node, $isArr= false, $maxPerPage=-1, $orderBy= "t1.left_number asc"){
        $arrParam = array();
        $arrParam['orderBy'] = $orderBy;
        $arrParam['andWhere'][] = "t1.is_avail=1";
        $arrParam['andWhere'][] = "t1.right_number = t1.left_number + 1";
        $limitRows = ($maxPerPage == -1) ? self::$_maxNodesPerGet : $maxPerPage;
        return $this->getAbstractList(array_merge_recursive($arrParam, $this->getCustomFilter()), 1, $limitRows, $isArr);
    }

    /*
     * createNode
     * @return node
     */
    public function createNode($parent, $params=array()){
        
        $this->updateTreeAfterCreate($parent, "1");

        $newNode = $this->create($params);
        $newNode->setParentId($parent->getId());
        $newNode->setLeftNumber($parent->getRightNumber());
        $newNode->setRightNumber($parent->getRightNumber()+1);
        $newNode->setLevel($parent->getLevel()+1);
        $newNode->save();

//        $parent->setRightNumber($parent->getRightNumber()+2);
//        $parent->save();
        
        return $newNode;
    }

    /*
     * updateNodes after create a node
     */
    public function updateTreeAfterCreate($parent, $isAvail="all"){
        $customFilterStr = $this->getCustomFilter(true);

        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("right_number", "right_number + 2")
                        ->where("right_number>=" . $parent->getRightNumber())
                        ->andWhere("is_avail=1");
        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }
        
        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }

        $objQuery->execute();

        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("left_number", "left_number + 2")
                        ->where("left_number>" . $parent->getRightNumber());

        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }

        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }

        $objQuery->execute();
        $objQuery->free();
    }

    /*
     * editNode
     * @return node
     */
    public function editNode(Doctrine_Record $node, $params=array()){
        if(is_array($params) && count($params)>0){
            foreach($params as $k=>$v){
                $node->set($k, $v);
            }
            $node->save();
        }
        
    }

    /*
     * moveNode
     * @return node
     */
    public function moveNode(Doctrine_Record $node, Doctrine_Record $targetParentNode, $params=array()){

        $this->disableBranch($node);
        $this->updateTreeAfterRemove($node, "1");
        $node->setParentId($targetParentNode->getId());
        $this->enableBranch($node);
        $this->updateTreeAfterCreate($node, "1");
    }

    public function enableBranch($node){
        $properties = array("is_avail"=>"1");
        return $this->setBranchProperties($properties, $node);
    }

    public function disableBranch($node){
        $properties = array("is_avail"=>"0");
        return $this->setBranchProperties($properties, $node);
    }

    /*
     * setNodeProperties
     */
    public function setBranchProperties(array $properties, $theNode, $recursive=true, $maxPerPage=-1){
        $nodes = $this->getChildren($theNode, $recursive, false, $maxPerPage);
        if($nodes->count(0) > 0){
            foreach($nodes as $node){
                if(is_array($properties) && count($properties)>0){
                    foreach($properties as $k=>$v){
                         $node->set($k, $v);
                    }
                    $node->save();
                }
            }
        }
        return true;
    }


    /*
     * removeNode
     * @return node
     */
    public function removeNode($node, $params=array()){
        $children = $this->getChildren($node, true);

        $succFlag = true;
        if($children->count()>0){
            foreach($children as $child){
                if(!$child->delete()){
                    $succFlag = false;
                    break;
                }
            }
        }
        
        $this->updateTreeAfterRemove($node, "1");

        if($succFlag){
            $succFlag = $node->delete();
        }

        return $succFlag;
    }

    /*
     * updateNodes after remove a node
     * $isAvail - can be "all", "1", "0"
     */
    public function updateTreeAfterRemove($node, $isAvail="all"){
        $customFilterStr = $this->getCustomFilter(true);
        $minusNumber = $node->getRightNumber() - $node->getLeftNumber() + 1;
        
        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("right_number", "right_number - {$minusNumber}")
                        ->where("right_number>" . $node->getRightNumber());
                        
        if($isAvail != "all"){
            $objQuery->andWhere("is_avail={$isAvail}");
        }

        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }

        $objQuery->execute();

        $objQuery = $this->createQuery()
                        ->update($this->getComponentName()." t1")
                        ->set("left_number", "left_number - {$minusNumber}")
                        ->where("left_number>" . $node->getRightNumber())
                        ->andWhere("is_avail=1");
        if($customFilterStr!=""){
            $objQuery->andWhere($customFilterStr);
        }
        
        $objQuery->execute();
        $objQuery->free();
    }

//    public function getFilter($fixParams, $toStr=false){
//        if(!$toStr){
//            return array_merge_recursive($fixParams, $this->getCustomFilter());
//        }
//        {
//            $filterStr = "";
//            $filterParams =
//        }
//    }

    /*
     * set custom filter params in the tree
     * canbe override by children
     * @params - array("Key"=>"Value"), looks like
     *   $params = array(
     *      "user_id" => 1
     *   )
     */
    public function setCustomFilter(array $params){
        $this->_customFilterParams = $params;
    }

    /*
     * get custom filter params in the tree
     * canbe override by children
     */
    public function getCustomFilter($toStr=false){
        if(!$toStr){
            $arrParams = array();
            if(is_array($this->_customFilterParams) && count($this->_customFilterParams)>0){
                foreach($this->_customFilterParams as $k => $v){
                    $arrParams['andWhere'][] = "t1.{$k}={$v}";
                }
            }
            return $arrParams;
        }
        else{
            $filterStr = "";
            if(is_array($this->_customFilterParams) && count($this->_customFilterParams)>0){
                foreach($this->_customFilterParams as $k => $v){
                    $arrParams[] = "t1.{$k}={$v}";
                }
                $filterStr = implode(" and ", $arrParams);
            }
            return $filterStr;
        }
    }


//    /*
//     * _move
//     * @return
//     */
//    protected function _move($id, $parent, $params=array(), $isCopy = false) {
//        if($parent->getId()===0 || $id===1){
//            return false;
//        }
//
//        $ndif = 2;
//	$nodeIds = array(-1);
//
//        $node = $this->findOneById($id);
//        $nChildren = array();
//        if($node){
//            $nChildren = $this->getChildren($node);
//        }
//
//        $pChildren = array();
//        $pChildren = $this->getChildren($parent);
//    }

//    /*
//     * return ids array or objects colleciton
//     */
//    public function getIdsByCodes($codes=array(), $rowsLimit=500, $isArr=true, $orderBy= "t1.left_number asc")
//    {
//        $params = array();
//        $params['andWhere'][] = "t1.code in (\"".implode('","', $codes)."\")";
//        $params['limit']      = $rowsLimit;
//        $params['orderBy']    = $orderBy;
//        $items = $this->getList($params, 1, $rowsLimit, false);
//        if($isArr)
//        {
//            $ids = array();
//            if($items->count()>0)
//            {
//                foreach($items as $item)
//                {
//                    $ids[] = $item->getId();
//                }
//            }
//            return $ids;
//        }
//        else
//        {
//            return $items;
//        }
//    }
//
//    public function getListByParents($parents=array(), $rowsLimit=500, $isArr= false, $orderBy= "t1.left_number asc")
//    {
//        $params = array();
//        $params['andWhere'][] = "t1.parent in (".implode(',', $parents).")";
//        $params['limit']      = $rowsLimit;
//        $params['orderBy']    = $orderBy;
//        return $this->getList($params, 1, $rowsLimit, $isArr);
//    }
//
//    public function getIdNameHashListByParents($parents=array(), $rowsLimit=500, $orderBy= "t1.left_number asc")
//    {
//        $params = array();
//        $params['andWhere'][] = "t1.parent in (".implode(',', $parents).")";
//        $params['limit']      = $rowsLimit;
//        $params['orderBy']    = $orderBy;
//        return $this->getHashList("id", "name", $params);
//    }
//
//
//    /*
//     * has children of the node
//     * @return boolean
//     */
//    public function hasChildren($node)
//    {
//        $id = is_object($node) ? $node->getId() : $node;
//        $objQuery = $this->createQuery('t1')
//             ->select("count(*) as total")
//             ->where("t1.parent=?", $id);
//        $dataResult = $objQuery->fetchOne();
//        $objQuery->free();
//        return ($dataResult['total']>0);
//    }
//
//    /*
//     * del tree/branch
//     */
//    public function delTree($id, $layer)
//    {
//        $depth = JsTreeDataHelper::getInstance()->getDepth($id, WacTable::$goodsCategory, 500);
//        if($this->maxLayerNum >= ($layer+$depth))  // fast delete
//        {
//            $objQuery = $this->createQuery('t1')
//                    ->delete()
//                    ->where("t1.layer{$layer}={$id}");
//            $objQuery->execute();
//        }
//        else
//        {
//            $this->traverseDel($id, $this->limitNodes);
//            $this->delete($id);
//        }
//
//    }
//
//    /*
//     * traverse del nodes
//     */
//    public function traverseDel($parent,$limitNum)
//    {
//        $nodes = $this->getListByParent($parent, $limitNum, true);
//        if(count($nodes)>0 && is_array($nodes))
//        {
//            foreach($nodes as &$node)
//            {
//                if($this->isBranch($node['node_type']))
//                {
//                    $this->traverseDel($node['id'], $limitNum);
//                    $this->delete($node['id']);
//                }
//                else
//                {
//                    $this->delete($node['id']);
//                }
//            }
//        }
//    }
//
//    /*
//     * del a node
//     */
//    public function delete($id)
//    {
////        echo "<br/>delete : {$id}";
//        $objQuery = $this->createQuery('t1')
//                    ->delete()
//                    ->where("t1.id={$id}");
//        $objQuery->execute();
//    }
//
//    public function isBranch($val)
//    {
//        return ($val==1);
//    }

}